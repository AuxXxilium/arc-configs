name: Build Configs

on:
  workflow_dispatch:
    inputs:
      prerelease:
        description: 'pre release'
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Init Env
        run: |
          git config --global user.email "info@auxxxilium.tech"
          git config --global user.name "AuxXxilium"
          sudo timedatectl set-timezone "Europe/Berlin" 

      - name: Calculate version
        run: |
          # Calculate Version
          VERSION=""
          LATEST_TAG="$(curl -skL "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r ".tag_name" 2>/dev/null)"
          if [ -n "${LATEST_TAG}" -a "$(echo ${LATEST_TAG} | cut -d '.' -f 1,2)" = "$(date +'%y.%-m')" ]; then  # format %y.%-m.$i
            VERSION="$(echo ${LATEST_TAG} | awk -F '.' '{$3=$3+1}1' OFS='.')"
          else
            VERSION="$(date +'%y.%-m').0"
          fi

          CHANGELOG=$(git log --pretty=format:"%s" ${LATEST_TAG}..HEAD | sort)
          if [ -n "${CHANGELOG}" ]; then
            echo "Changelog: ${CHANGELOG}"
            echo "${CHANGELOG}" >changelog.txt
          else
            CHANGELOG='New Build Tree'
            echo "Changelog: ${CHANGELOG}"
            echo "${CHANGELOG}" >changelog.txt
          fi

          if [ -n "${VERSION}" ]; then
            # Modify Source File
            echo "${VERSION}" >VERSION

            git pull
            status=$(git status -s | awk '{printf " %s", $2}')
            if [ -n "${status}" ]; then
              git add ${status}
              git commit -m "build: ${VERSION}"
              git push -f
            fi
          fi

      - name: Build configs packages
        run: |
          zip -9 configs.zip -j *.yml VERSION

      - name: Upload to Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: configs
          path: |
            configs.zip

      - name: Release
        uses: softprops/action-gh-release@v1
        if: env.VERSION != ''
        with:
          tag_name: ${{ env.VERSION }}
          prerelease: ${{ inputs.prerelease }}
          files: |
            configs.zip
            changelog.txt